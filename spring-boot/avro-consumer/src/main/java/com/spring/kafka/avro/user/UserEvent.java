/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.spring.kafka.avro.user;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class UserEvent extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -6181173498434976852L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"UserEvent\",\"namespace\":\"com.spring.kafka.avro.user\",\"fields\":[{\"name\":\"eventId\",\"type\":\"string\"},{\"name\":\"eventType\",\"type\":\"string\"},{\"name\":\"eventTimestamp\",\"type\":\"long\",\"logicalType\":\"timestamp-micros\"},{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"firstName\",\"type\":\"string\"},{\"name\":\"lastName\",\"type\":\"string\"},{\"name\":\"email\",\"type\":\"string\"},{\"name\":\"mobileNumber\",\"type\":\"string\"},{\"name\":\"city\",\"type\":\"string\"},{\"name\":\"country\",\"type\":\"string\"},{\"name\":\"createdOn\",\"type\":\"long\",\"logicalType\":\"timestamp-micros\"},{\"name\":\"updatedOn\",\"type\":\"long\",\"logicalType\":\"timestamp-micros\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<UserEvent> ENCODER =
      new BinaryMessageEncoder<UserEvent>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<UserEvent> DECODER =
      new BinaryMessageDecoder<UserEvent>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<UserEvent> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<UserEvent> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<UserEvent> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<UserEvent>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this UserEvent to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a UserEvent from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a UserEvent instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static UserEvent fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.CharSequence eventId;
   private java.lang.CharSequence eventType;
   private long eventTimestamp;
   private java.lang.CharSequence id;
   private java.lang.CharSequence firstName;
   private java.lang.CharSequence lastName;
   private java.lang.CharSequence email;
   private java.lang.CharSequence mobileNumber;
   private java.lang.CharSequence city;
   private java.lang.CharSequence country;
   private long createdOn;
   private long updatedOn;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public UserEvent() {}

  /**
   * All-args constructor.
   * @param eventId The new value for eventId
   * @param eventType The new value for eventType
   * @param eventTimestamp The new value for eventTimestamp
   * @param id The new value for id
   * @param firstName The new value for firstName
   * @param lastName The new value for lastName
   * @param email The new value for email
   * @param mobileNumber The new value for mobileNumber
   * @param city The new value for city
   * @param country The new value for country
   * @param createdOn The new value for createdOn
   * @param updatedOn The new value for updatedOn
   */
  public UserEvent(java.lang.CharSequence eventId, java.lang.CharSequence eventType, java.lang.Long eventTimestamp, java.lang.CharSequence id, java.lang.CharSequence firstName, java.lang.CharSequence lastName, java.lang.CharSequence email, java.lang.CharSequence mobileNumber, java.lang.CharSequence city, java.lang.CharSequence country, java.lang.Long createdOn, java.lang.Long updatedOn) {
    this.eventId = eventId;
    this.eventType = eventType;
    this.eventTimestamp = eventTimestamp;
    this.id = id;
    this.firstName = firstName;
    this.lastName = lastName;
    this.email = email;
    this.mobileNumber = mobileNumber;
    this.city = city;
    this.country = country;
    this.createdOn = createdOn;
    this.updatedOn = updatedOn;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return eventId;
    case 1: return eventType;
    case 2: return eventTimestamp;
    case 3: return id;
    case 4: return firstName;
    case 5: return lastName;
    case 6: return email;
    case 7: return mobileNumber;
    case 8: return city;
    case 9: return country;
    case 10: return createdOn;
    case 11: return updatedOn;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: eventId = (java.lang.CharSequence)value$; break;
    case 1: eventType = (java.lang.CharSequence)value$; break;
    case 2: eventTimestamp = (java.lang.Long)value$; break;
    case 3: id = (java.lang.CharSequence)value$; break;
    case 4: firstName = (java.lang.CharSequence)value$; break;
    case 5: lastName = (java.lang.CharSequence)value$; break;
    case 6: email = (java.lang.CharSequence)value$; break;
    case 7: mobileNumber = (java.lang.CharSequence)value$; break;
    case 8: city = (java.lang.CharSequence)value$; break;
    case 9: country = (java.lang.CharSequence)value$; break;
    case 10: createdOn = (java.lang.Long)value$; break;
    case 11: updatedOn = (java.lang.Long)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'eventId' field.
   * @return The value of the 'eventId' field.
   */
  public java.lang.CharSequence getEventId() {
    return eventId;
  }


  /**
   * Sets the value of the 'eventId' field.
   * @param value the value to set.
   */
  public void setEventId(java.lang.CharSequence value) {
    this.eventId = value;
  }

  /**
   * Gets the value of the 'eventType' field.
   * @return The value of the 'eventType' field.
   */
  public java.lang.CharSequence getEventType() {
    return eventType;
  }


  /**
   * Sets the value of the 'eventType' field.
   * @param value the value to set.
   */
  public void setEventType(java.lang.CharSequence value) {
    this.eventType = value;
  }

  /**
   * Gets the value of the 'eventTimestamp' field.
   * @return The value of the 'eventTimestamp' field.
   */
  public long getEventTimestamp() {
    return eventTimestamp;
  }


  /**
   * Sets the value of the 'eventTimestamp' field.
   * @param value the value to set.
   */
  public void setEventTimestamp(long value) {
    this.eventTimestamp = value;
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.CharSequence getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.CharSequence value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'firstName' field.
   * @return The value of the 'firstName' field.
   */
  public java.lang.CharSequence getFirstName() {
    return firstName;
  }


  /**
   * Sets the value of the 'firstName' field.
   * @param value the value to set.
   */
  public void setFirstName(java.lang.CharSequence value) {
    this.firstName = value;
  }

  /**
   * Gets the value of the 'lastName' field.
   * @return The value of the 'lastName' field.
   */
  public java.lang.CharSequence getLastName() {
    return lastName;
  }


  /**
   * Sets the value of the 'lastName' field.
   * @param value the value to set.
   */
  public void setLastName(java.lang.CharSequence value) {
    this.lastName = value;
  }

  /**
   * Gets the value of the 'email' field.
   * @return The value of the 'email' field.
   */
  public java.lang.CharSequence getEmail() {
    return email;
  }


  /**
   * Sets the value of the 'email' field.
   * @param value the value to set.
   */
  public void setEmail(java.lang.CharSequence value) {
    this.email = value;
  }

  /**
   * Gets the value of the 'mobileNumber' field.
   * @return The value of the 'mobileNumber' field.
   */
  public java.lang.CharSequence getMobileNumber() {
    return mobileNumber;
  }


  /**
   * Sets the value of the 'mobileNumber' field.
   * @param value the value to set.
   */
  public void setMobileNumber(java.lang.CharSequence value) {
    this.mobileNumber = value;
  }

  /**
   * Gets the value of the 'city' field.
   * @return The value of the 'city' field.
   */
  public java.lang.CharSequence getCity() {
    return city;
  }


  /**
   * Sets the value of the 'city' field.
   * @param value the value to set.
   */
  public void setCity(java.lang.CharSequence value) {
    this.city = value;
  }

  /**
   * Gets the value of the 'country' field.
   * @return The value of the 'country' field.
   */
  public java.lang.CharSequence getCountry() {
    return country;
  }


  /**
   * Sets the value of the 'country' field.
   * @param value the value to set.
   */
  public void setCountry(java.lang.CharSequence value) {
    this.country = value;
  }

  /**
   * Gets the value of the 'createdOn' field.
   * @return The value of the 'createdOn' field.
   */
  public long getCreatedOn() {
    return createdOn;
  }


  /**
   * Sets the value of the 'createdOn' field.
   * @param value the value to set.
   */
  public void setCreatedOn(long value) {
    this.createdOn = value;
  }

  /**
   * Gets the value of the 'updatedOn' field.
   * @return The value of the 'updatedOn' field.
   */
  public long getUpdatedOn() {
    return updatedOn;
  }


  /**
   * Sets the value of the 'updatedOn' field.
   * @param value the value to set.
   */
  public void setUpdatedOn(long value) {
    this.updatedOn = value;
  }

  /**
   * Creates a new UserEvent RecordBuilder.
   * @return A new UserEvent RecordBuilder
   */
  public static UserEvent.Builder newBuilder() {
    return new UserEvent.Builder();
  }

  /**
   * Creates a new UserEvent RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new UserEvent RecordBuilder
   */
  public static UserEvent.Builder newBuilder(UserEvent.Builder other) {
    if (other == null) {
      return new UserEvent.Builder();
    } else {
      return new UserEvent.Builder(other);
    }
  }

  /**
   * Creates a new UserEvent RecordBuilder by copying an existing UserEvent instance.
   * @param other The existing instance to copy.
   * @return A new UserEvent RecordBuilder
   */
  public static UserEvent.Builder newBuilder(UserEvent other) {
    if (other == null) {
      return new UserEvent.Builder();
    } else {
      return new UserEvent.Builder(other);
    }
  }

  /**
   * RecordBuilder for UserEvent instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<UserEvent>
    implements org.apache.avro.data.RecordBuilder<UserEvent> {

    private java.lang.CharSequence eventId;
    private java.lang.CharSequence eventType;
    private long eventTimestamp;
    private java.lang.CharSequence id;
    private java.lang.CharSequence firstName;
    private java.lang.CharSequence lastName;
    private java.lang.CharSequence email;
    private java.lang.CharSequence mobileNumber;
    private java.lang.CharSequence city;
    private java.lang.CharSequence country;
    private long createdOn;
    private long updatedOn;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(UserEvent.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.eventId)) {
        this.eventId = data().deepCopy(fields()[0].schema(), other.eventId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.eventType)) {
        this.eventType = data().deepCopy(fields()[1].schema(), other.eventType);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.eventTimestamp)) {
        this.eventTimestamp = data().deepCopy(fields()[2].schema(), other.eventTimestamp);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.id)) {
        this.id = data().deepCopy(fields()[3].schema(), other.id);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.firstName)) {
        this.firstName = data().deepCopy(fields()[4].schema(), other.firstName);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.lastName)) {
        this.lastName = data().deepCopy(fields()[5].schema(), other.lastName);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.email)) {
        this.email = data().deepCopy(fields()[6].schema(), other.email);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.mobileNumber)) {
        this.mobileNumber = data().deepCopy(fields()[7].schema(), other.mobileNumber);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.city)) {
        this.city = data().deepCopy(fields()[8].schema(), other.city);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.country)) {
        this.country = data().deepCopy(fields()[9].schema(), other.country);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.createdOn)) {
        this.createdOn = data().deepCopy(fields()[10].schema(), other.createdOn);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
      if (isValidValue(fields()[11], other.updatedOn)) {
        this.updatedOn = data().deepCopy(fields()[11].schema(), other.updatedOn);
        fieldSetFlags()[11] = other.fieldSetFlags()[11];
      }
    }

    /**
     * Creates a Builder by copying an existing UserEvent instance
     * @param other The existing instance to copy.
     */
    private Builder(UserEvent other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.eventId)) {
        this.eventId = data().deepCopy(fields()[0].schema(), other.eventId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.eventType)) {
        this.eventType = data().deepCopy(fields()[1].schema(), other.eventType);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.eventTimestamp)) {
        this.eventTimestamp = data().deepCopy(fields()[2].schema(), other.eventTimestamp);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.id)) {
        this.id = data().deepCopy(fields()[3].schema(), other.id);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.firstName)) {
        this.firstName = data().deepCopy(fields()[4].schema(), other.firstName);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.lastName)) {
        this.lastName = data().deepCopy(fields()[5].schema(), other.lastName);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.email)) {
        this.email = data().deepCopy(fields()[6].schema(), other.email);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.mobileNumber)) {
        this.mobileNumber = data().deepCopy(fields()[7].schema(), other.mobileNumber);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.city)) {
        this.city = data().deepCopy(fields()[8].schema(), other.city);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.country)) {
        this.country = data().deepCopy(fields()[9].schema(), other.country);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.createdOn)) {
        this.createdOn = data().deepCopy(fields()[10].schema(), other.createdOn);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.updatedOn)) {
        this.updatedOn = data().deepCopy(fields()[11].schema(), other.updatedOn);
        fieldSetFlags()[11] = true;
      }
    }

    /**
      * Gets the value of the 'eventId' field.
      * @return The value.
      */
    public java.lang.CharSequence getEventId() {
      return eventId;
    }


    /**
      * Sets the value of the 'eventId' field.
      * @param value The value of 'eventId'.
      * @return This builder.
      */
    public UserEvent.Builder setEventId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.eventId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'eventId' field has been set.
      * @return True if the 'eventId' field has been set, false otherwise.
      */
    public boolean hasEventId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'eventId' field.
      * @return This builder.
      */
    public UserEvent.Builder clearEventId() {
      eventId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'eventType' field.
      * @return The value.
      */
    public java.lang.CharSequence getEventType() {
      return eventType;
    }


    /**
      * Sets the value of the 'eventType' field.
      * @param value The value of 'eventType'.
      * @return This builder.
      */
    public UserEvent.Builder setEventType(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.eventType = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'eventType' field has been set.
      * @return True if the 'eventType' field has been set, false otherwise.
      */
    public boolean hasEventType() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'eventType' field.
      * @return This builder.
      */
    public UserEvent.Builder clearEventType() {
      eventType = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'eventTimestamp' field.
      * @return The value.
      */
    public long getEventTimestamp() {
      return eventTimestamp;
    }


    /**
      * Sets the value of the 'eventTimestamp' field.
      * @param value The value of 'eventTimestamp'.
      * @return This builder.
      */
    public UserEvent.Builder setEventTimestamp(long value) {
      validate(fields()[2], value);
      this.eventTimestamp = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'eventTimestamp' field has been set.
      * @return True if the 'eventTimestamp' field has been set, false otherwise.
      */
    public boolean hasEventTimestamp() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'eventTimestamp' field.
      * @return This builder.
      */
    public UserEvent.Builder clearEventTimestamp() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.CharSequence getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public UserEvent.Builder setId(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.id = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public UserEvent.Builder clearId() {
      id = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'firstName' field.
      * @return The value.
      */
    public java.lang.CharSequence getFirstName() {
      return firstName;
    }


    /**
      * Sets the value of the 'firstName' field.
      * @param value The value of 'firstName'.
      * @return This builder.
      */
    public UserEvent.Builder setFirstName(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.firstName = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'firstName' field has been set.
      * @return True if the 'firstName' field has been set, false otherwise.
      */
    public boolean hasFirstName() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'firstName' field.
      * @return This builder.
      */
    public UserEvent.Builder clearFirstName() {
      firstName = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'lastName' field.
      * @return The value.
      */
    public java.lang.CharSequence getLastName() {
      return lastName;
    }


    /**
      * Sets the value of the 'lastName' field.
      * @param value The value of 'lastName'.
      * @return This builder.
      */
    public UserEvent.Builder setLastName(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.lastName = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'lastName' field has been set.
      * @return True if the 'lastName' field has been set, false otherwise.
      */
    public boolean hasLastName() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'lastName' field.
      * @return This builder.
      */
    public UserEvent.Builder clearLastName() {
      lastName = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'email' field.
      * @return The value.
      */
    public java.lang.CharSequence getEmail() {
      return email;
    }


    /**
      * Sets the value of the 'email' field.
      * @param value The value of 'email'.
      * @return This builder.
      */
    public UserEvent.Builder setEmail(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.email = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'email' field has been set.
      * @return True if the 'email' field has been set, false otherwise.
      */
    public boolean hasEmail() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'email' field.
      * @return This builder.
      */
    public UserEvent.Builder clearEmail() {
      email = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'mobileNumber' field.
      * @return The value.
      */
    public java.lang.CharSequence getMobileNumber() {
      return mobileNumber;
    }


    /**
      * Sets the value of the 'mobileNumber' field.
      * @param value The value of 'mobileNumber'.
      * @return This builder.
      */
    public UserEvent.Builder setMobileNumber(java.lang.CharSequence value) {
      validate(fields()[7], value);
      this.mobileNumber = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'mobileNumber' field has been set.
      * @return True if the 'mobileNumber' field has been set, false otherwise.
      */
    public boolean hasMobileNumber() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'mobileNumber' field.
      * @return This builder.
      */
    public UserEvent.Builder clearMobileNumber() {
      mobileNumber = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'city' field.
      * @return The value.
      */
    public java.lang.CharSequence getCity() {
      return city;
    }


    /**
      * Sets the value of the 'city' field.
      * @param value The value of 'city'.
      * @return This builder.
      */
    public UserEvent.Builder setCity(java.lang.CharSequence value) {
      validate(fields()[8], value);
      this.city = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'city' field has been set.
      * @return True if the 'city' field has been set, false otherwise.
      */
    public boolean hasCity() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'city' field.
      * @return This builder.
      */
    public UserEvent.Builder clearCity() {
      city = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'country' field.
      * @return The value.
      */
    public java.lang.CharSequence getCountry() {
      return country;
    }


    /**
      * Sets the value of the 'country' field.
      * @param value The value of 'country'.
      * @return This builder.
      */
    public UserEvent.Builder setCountry(java.lang.CharSequence value) {
      validate(fields()[9], value);
      this.country = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'country' field has been set.
      * @return True if the 'country' field has been set, false otherwise.
      */
    public boolean hasCountry() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'country' field.
      * @return This builder.
      */
    public UserEvent.Builder clearCountry() {
      country = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'createdOn' field.
      * @return The value.
      */
    public long getCreatedOn() {
      return createdOn;
    }


    /**
      * Sets the value of the 'createdOn' field.
      * @param value The value of 'createdOn'.
      * @return This builder.
      */
    public UserEvent.Builder setCreatedOn(long value) {
      validate(fields()[10], value);
      this.createdOn = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'createdOn' field has been set.
      * @return True if the 'createdOn' field has been set, false otherwise.
      */
    public boolean hasCreatedOn() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'createdOn' field.
      * @return This builder.
      */
    public UserEvent.Builder clearCreatedOn() {
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'updatedOn' field.
      * @return The value.
      */
    public long getUpdatedOn() {
      return updatedOn;
    }


    /**
      * Sets the value of the 'updatedOn' field.
      * @param value The value of 'updatedOn'.
      * @return This builder.
      */
    public UserEvent.Builder setUpdatedOn(long value) {
      validate(fields()[11], value);
      this.updatedOn = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'updatedOn' field has been set.
      * @return True if the 'updatedOn' field has been set, false otherwise.
      */
    public boolean hasUpdatedOn() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'updatedOn' field.
      * @return This builder.
      */
    public UserEvent.Builder clearUpdatedOn() {
      fieldSetFlags()[11] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public UserEvent build() {
      try {
        UserEvent record = new UserEvent();
        record.eventId = fieldSetFlags()[0] ? this.eventId : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.eventType = fieldSetFlags()[1] ? this.eventType : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.eventTimestamp = fieldSetFlags()[2] ? this.eventTimestamp : (java.lang.Long) defaultValue(fields()[2]);
        record.id = fieldSetFlags()[3] ? this.id : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.firstName = fieldSetFlags()[4] ? this.firstName : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.lastName = fieldSetFlags()[5] ? this.lastName : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.email = fieldSetFlags()[6] ? this.email : (java.lang.CharSequence) defaultValue(fields()[6]);
        record.mobileNumber = fieldSetFlags()[7] ? this.mobileNumber : (java.lang.CharSequence) defaultValue(fields()[7]);
        record.city = fieldSetFlags()[8] ? this.city : (java.lang.CharSequence) defaultValue(fields()[8]);
        record.country = fieldSetFlags()[9] ? this.country : (java.lang.CharSequence) defaultValue(fields()[9]);
        record.createdOn = fieldSetFlags()[10] ? this.createdOn : (java.lang.Long) defaultValue(fields()[10]);
        record.updatedOn = fieldSetFlags()[11] ? this.updatedOn : (java.lang.Long) defaultValue(fields()[11]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<UserEvent>
    WRITER$ = (org.apache.avro.io.DatumWriter<UserEvent>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<UserEvent>
    READER$ = (org.apache.avro.io.DatumReader<UserEvent>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.eventId);

    out.writeString(this.eventType);

    out.writeLong(this.eventTimestamp);

    out.writeString(this.id);

    out.writeString(this.firstName);

    out.writeString(this.lastName);

    out.writeString(this.email);

    out.writeString(this.mobileNumber);

    out.writeString(this.city);

    out.writeString(this.country);

    out.writeLong(this.createdOn);

    out.writeLong(this.updatedOn);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.eventId = in.readString(this.eventId instanceof Utf8 ? (Utf8)this.eventId : null);

      this.eventType = in.readString(this.eventType instanceof Utf8 ? (Utf8)this.eventType : null);

      this.eventTimestamp = in.readLong();

      this.id = in.readString(this.id instanceof Utf8 ? (Utf8)this.id : null);

      this.firstName = in.readString(this.firstName instanceof Utf8 ? (Utf8)this.firstName : null);

      this.lastName = in.readString(this.lastName instanceof Utf8 ? (Utf8)this.lastName : null);

      this.email = in.readString(this.email instanceof Utf8 ? (Utf8)this.email : null);

      this.mobileNumber = in.readString(this.mobileNumber instanceof Utf8 ? (Utf8)this.mobileNumber : null);

      this.city = in.readString(this.city instanceof Utf8 ? (Utf8)this.city : null);

      this.country = in.readString(this.country instanceof Utf8 ? (Utf8)this.country : null);

      this.createdOn = in.readLong();

      this.updatedOn = in.readLong();

    } else {
      for (int i = 0; i < 12; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.eventId = in.readString(this.eventId instanceof Utf8 ? (Utf8)this.eventId : null);
          break;

        case 1:
          this.eventType = in.readString(this.eventType instanceof Utf8 ? (Utf8)this.eventType : null);
          break;

        case 2:
          this.eventTimestamp = in.readLong();
          break;

        case 3:
          this.id = in.readString(this.id instanceof Utf8 ? (Utf8)this.id : null);
          break;

        case 4:
          this.firstName = in.readString(this.firstName instanceof Utf8 ? (Utf8)this.firstName : null);
          break;

        case 5:
          this.lastName = in.readString(this.lastName instanceof Utf8 ? (Utf8)this.lastName : null);
          break;

        case 6:
          this.email = in.readString(this.email instanceof Utf8 ? (Utf8)this.email : null);
          break;

        case 7:
          this.mobileNumber = in.readString(this.mobileNumber instanceof Utf8 ? (Utf8)this.mobileNumber : null);
          break;

        case 8:
          this.city = in.readString(this.city instanceof Utf8 ? (Utf8)this.city : null);
          break;

        case 9:
          this.country = in.readString(this.country instanceof Utf8 ? (Utf8)this.country : null);
          break;

        case 10:
          this.createdOn = in.readLong();
          break;

        case 11:
          this.updatedOn = in.readLong();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










